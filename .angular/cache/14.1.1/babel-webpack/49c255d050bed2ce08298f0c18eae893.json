{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/12345/Desktop/final simplilean capstone/fe/ecom-app-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/12345/Desktop/final simplilean capstone/fe/ecom-app-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/12345/Desktop/final simplilean capstone/fe/ecom-app-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var CartService = /*#__PURE__*/(function () {\n  var CartService = /*#__PURE__*/function () {\n    function CartService() {\n      _classCallCheck(this, CartService);\n\n      this.cartItems = [];\n      this.totalPrice = new BehaviorSubject(0);\n      this.totalQuantity = new BehaviorSubject(0);\n    }\n\n    _createClass(CartService, [{\n      key: \"addToCart\",\n      value: function addToCart(theCartItem) {\n        // check if we already have the item in our cart.\n        var alreadyExistInCart = false;\n        var existingCartItem = undefined;\n\n        if (this.cartItems.length > 0) {\n          //find the item in the cart based on item id\n          existingCartItem = this.cartItems.find(function (tempCartItem) {\n            return tempCartItem.id === theCartItem.id;\n          }); // check if we found it\n\n          alreadyExistInCart = existingCartItem != undefined;\n        }\n\n        if (alreadyExistInCart) {\n          // increment the quantity\n          existingCartItem.quantity++;\n        } else {\n          // just add the item in the array\n          this.cartItems.push(theCartItem);\n        } // compute the totals\n\n\n        this.computeCartTotals();\n      }\n    }, {\n      key: \"computeCartTotals\",\n      value: function computeCartTotals() {\n        var totalPriceValue = 0;\n        var totalQuantityValue = 0;\n\n        var _iterator = _createForOfIteratorHelper(this.cartItems),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var tempCartItem = _step.value;\n            totalPriceValue += tempCartItem.quantity * tempCartItem.unitPrice;\n            totalQuantityValue += tempCartItem.quantity;\n          } // publish the new values....all subscribers will recieve the new data\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.totalPrice.next(totalPriceValue);\n        this.totalQuantity.next(totalQuantityValue); // log the cart data just for debugging purpose\n\n        this.logCartData(totalPriceValue, totalQuantityValue);\n      }\n    }, {\n      key: \"logCartData\",\n      value: function logCartData(totalPriceValue, totalQuantityValue) {\n        console.log('-----------the cart content--------');\n\n        var _iterator2 = _createForOfIteratorHelper(this.cartItems),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var tempCartItem = _step2.value;\n            var subTotalPrice = tempCartItem.unitPrice * tempCartItem.quantity;\n            console.log(\"Name: \".concat(tempCartItem.name, \", quantity: \").concat(tempCartItem.quantity, \", price: \").concat(tempCartItem.unitPrice, \", subTotalPrice: \").concat(subTotalPrice, \" \"));\n            console.log(\"totalPrice: \".concat(totalPriceValue, \", totalQuantity: \").concat(totalQuantityValue));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }, {\n      key: \"decrementQuantity\",\n      value: function decrementQuantity(theCartItem) {\n        theCartItem.quantity--;\n\n        if (theCartItem.quantity == 0) {\n          this.removeCartItem(theCartItem);\n        } else {\n          this.computeCartTotals();\n        }\n      }\n    }, {\n      key: \"removeCartItem\",\n      value: function removeCartItem(theCartItem) {\n        // get the item index in the array\n        var itemIndex = this.cartItems.findIndex(function (tempCartItem) {\n          return tempCartItem.id == theCartItem.id;\n        }); // if found, remove the item from the aray at the given index\n\n        if (itemIndex > -1) {\n          this.cartItems.splice(itemIndex, 1);\n          this.computeCartTotals();\n        }\n      }\n    }]);\n\n    return CartService;\n  }();\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}